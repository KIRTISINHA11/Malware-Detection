import streamlit as st
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.metrics._plot.confusion_matrix import plot_confusion_matrix as plt_confusion_matrix

# Function to load dataset
def load_dataset():
    uploaded_file = st.file_uploader("Upload dataset (malware.csv)", type="csv")
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file, sep='|')
        return data
    else:
        return None

# Function to preprocess dataset
def preprocess_data(data):
    X = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
    y = data['legitimate'].values
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=100, test_size=0.2)
    return X_train, X_test, y_train, y_test

# Function to train and evaluate models
def train_and_evaluate_model(model, X_train, X_test, y_train, y_test):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)
    st.write('Confusion Matrix')
    st.write(cm)
    plt_confusion_matrix(model, X_test, y_test)
    score = model.score(X_test, y_test)
    st.write('Score:', score)
    return score

# Main Streamlit app
def main():
    st.title('Malware Detection')
    st.write('Upload the dataset and select a model to train and evaluate.')

    # Load dataset
    data = load_dataset()
    if data is None:
        st.warning('Please upload a dataset.')
        return

    # Preprocess data
    X_train, X_test, y_train, y_test = preprocess_data(data)

    # Model selection
    models = {
        'Decision Tree': DecisionTreeClassifier(random_state=42),
        'Logistic Regression': LogisticRegression(max_iter=500),
        'Support Vector Classifier': SVC(kernel='rbf'),
        'Random Forest': RandomForestClassifier(),
        'Gradient Boosting': GradientBoostingClassifier(),
        'Naive Bayes': GaussianNB()
    }
    model_name = st.selectbox('Select a model', list(models.keys()))
    model = models[model_name]

    # Train and evaluate model
    st.write(f'### {model_name} Model')
    score = train_and_evaluate_model(model, X_train, X_test, y_train, y_test)
    st.write(f'{model_name} gave the best results with an accuracy of {score}')

if __name__ == '__main__':
    main()
